{"version":3,"sources":["Playground.js","InnerContent.js","App.js","serviceWorker.js","index.js"],"names":["confidis","children","Box","display","justifyContent","maxWidth","width","then","c","g","defaultProgram","trim","Container","styled","padding","TextArea","ExpandingTextArea","fontFamily","boxSizing","fontSize","minHeight","border","colors","grey","resize","overflow","TryItOut","fontWeight","color","borderBottom","paddingBottom","paddingLeft","paddingRight","marginBottom","useState","text","setText","output","setOutput","confidisLoaded","setConfidisLoaded","useEffect","interval","setInterval","clearInterval","free","GraphJS","new","split","line","result","execute_command","cmd","push","answer","confidence","toFixed","quality","e","toString","join","Grid","container","item","xs","flexGrow","style","position","contentEditable","value","onChange","target","pointerEvents","top","right","backgroundColor","opacity","marginTop","Top","TitleSection","LinksSection","paddingTop","blue","Title","SubTitle","About","lineHeight","Bottom","App","InnerContent","md","href","Playground","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.27f72991.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Box, Grid, styled, colors } from \"@material-ui/core\"\nimport ExpandingTextArea from \"react-expanding-textarea\"\n\nlet confidis\nimport(\"confidis/webpack\").then((c) => {\n  confidis = c\n})\n\nconst defaultProgram = `\n\nSET q1 a FROM s1\nSET q1 a FROM s2\nSET q1 a FROM s3\nSET q1 w FROM s4\n\nSET q2 b FROM s1\nSET q2 c FROM s2\nSET q2 b FROM s3\nSET q2 w FROM s4\n\nSET q3 d FROM s1\nSET q4 w FROM s4\n\nGET ANSWER TO q1\nGET ANSWER TO q2\nGET ANSWER TO q3\nGET ANSWER TO q4\n\n`.trim()\n\nconst Container = styled(Box)({ padding: 16 })\nconst TextArea = styled(ExpandingTextArea)({\n  fontFamily: \"monospace\",\n  boxSizing: \"border-box\",\n  width: \"100%\",\n  fontSize: 24,\n  minHeight: 600,\n  padding: 16,\n  border: `1px solid ${colors.grey[500]}`,\n  resize: \"both\",\n  overflow: \"auto\",\n})\nconst TryItOut = styled(Box)({\n  display: \"inline-block\",\n  fontWeight: 900,\n  fontSize: 24,\n  color: colors.grey[800],\n  borderBottom: `2px solid ${colors.grey[400]}`,\n  paddingBottom: 6,\n  paddingLeft: 4,\n  paddingRight: 16,\n  marginBottom: 16,\n})\nlet g\n\nexport default () => {\n  const [text, setText] = useState(defaultProgram)\n  const [output, setOutput] = useState(\"Computing in WebAssembly...\")\n  const [confidisLoaded, setConfidisLoaded] = useState(false)\n\n  useEffect(() => {\n    if (confidisLoaded) return\n    const interval = setInterval(() => {\n      if (confidis) {\n        setConfidisLoaded(true)\n        clearInterval(interval)\n      }\n    }, 100)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [confidisLoaded, setConfidisLoaded])\n\n  useEffect(() => {\n    if (!confidis) {\n      return\n    }\n    if (g) g.free()\n\n    g = confidis.GraphJS.new()\n    const output = []\n    for (const line of text.split(\"\\n\")) {\n      try {\n        const result = g.execute_command(line.trim())\n        if (result.cmd === \"GetAnswer\") {\n          output.push(\n            `${result.answer} (${(result.confidence * 100).toFixed(3)}%)`\n          )\n        } else if (result.cmd === \"GetSource\") {\n          output.push(`${result.quality.toFixed(3)}`)\n        } else {\n          output.push(\"\")\n        }\n      } catch (e) {\n        if (e.toString() === \"Blank command\") {\n          output.push(\"\")\n        } else {\n          output.push(\"Err: \" + e.toString())\n        }\n      }\n    }\n    setOutput(output.join(\"\\n\"))\n  }, [text, confidisLoaded])\n\n  return (\n    <Container>\n      <Grid container>\n        <Grid item xs={12}>\n          <Box display=\"flex\">\n            <TryItOut>Try It Out</TryItOut>\n            <Box flexGrow={1} />\n          </Box>\n          <Box style={{ position: \"relative\" }}>\n            <TextArea\n              contentEditable\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n            />\n            <TextArea\n              value={output}\n              style={{\n                display: \"inline-block\",\n                pointerEvents: \"none\",\n                position: \"absolute\",\n                top: 0,\n                right: 0,\n                border: \"none\",\n                backgroundColor: \"transparent\",\n                width: 400,\n                opacity: 0.5,\n              }}\n            />\n          </Box>\n        </Grid>\n        {/* <Grid item xs={4}> */}\n        {/* PUT GRAPH HERE */}\n        {/* </Grid> */}\n      </Grid>\n    </Container>\n  )\n}\n","import React from \"react\"\nimport { Box } from \"@material-ui/core\"\n\nexport default ({ children }) => (\n  <Box display=\"flex\" justifyContent=\"center\">\n    <Box maxWidth={1200} width=\"100%\">\n      {children}\n    </Box>\n  </Box>\n)\n","import React from \"react\"\nimport { Box, styled, Grid, colors } from \"@material-ui/core\"\nimport InnerContent from \"./InnerContent\"\nimport Playground from \"./Playground\"\n\nconst Container = styled(Box)({ marginTop: 40 })\nconst Top = styled(Box)({\n  // borderBottom: `1px solid ${colors.grey[400]}`,\n  paddingBottom: 40,\n})\nconst TitleSection = styled(Box)({ padding: 20 })\nconst LinksSection = styled(Box)({\n  paddingTop: 80,\n  color: colors.grey[600],\n  \"& a\": {\n    color: colors.blue[500],\n  },\n})\nconst Title = styled(Box)({\n  fontWeight: 900,\n  fontSize: 96,\n})\nconst SubTitle = styled(Box)({\n  fontWeight: 800,\n  fontSize: 48,\n  marginTop: 20,\n})\nconst About = styled(Box)({\n  fontSize: 18,\n  lineHeight: 1.5,\n  padding: 8,\n})\nconst Bottom = styled(Box)({})\n\nfunction App() {\n  return (\n    <Container>\n      <InnerContent>\n        <Top>\n          <Grid container>\n            <Grid xs={12} md={8} item>\n              <TitleSection>\n                <Title>Confidis</Title>\n                <SubTitle>\n                  A probabilistic key store for finding truth from arguing\n                  sources\n                </SubTitle>\n              </TitleSection>\n            </Grid>\n            <Grid xs={12} md={4} item>\n              <LinksSection>\n                <About>\n                  Confidis focuses on ease-of-use, correctness, performance, and\n                  resilience against adverserial scenarios. The library is\n                  written in Rust and can be used as an npm module.\n                  <br />\n                  <br />\n                  Confidis was originally designed by{\" \"}\n                  <a href=\"https://twitter.com/seveibar\">@seveibar</a> to\n                  analyze disagreeing data sources for data aggregation. It was\n                  further developed and sponsored by{\" \"}\n                  <a href=\"https://wao.ai\">wao.ai</a>.\n                  <br />\n                  <br />\n                  <a href=\"https://github.com/waoai/confidis\">\n                    Read more on the README.md\n                  </a>\n                </About>\n              </LinksSection>\n            </Grid>\n          </Grid>\n        </Top>\n        <Bottom>\n          <Playground />\n        </Bottom>\n      </InnerContent>\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}